name: Terraform Validation

on:
  pull_request:
    branches:
      - 'week*'
    types: [opened, synchronize, reopened]

jobs:
  terraform-validation:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Initialize Results
        run: |
          echo "FILE_STRUCTURE_RESULTS=" >> $GITHUB_ENV
          echo "SECURITY_RESULTS=" >> $GITHUB_ENV
          echo "FORMAT_RESULTS=" >> $GITHUB_ENV
          echo "VALIDATION_RESULTS=" >> $GITHUB_ENV
          echo "HAS_ISSUES=false" >> $GITHUB_ENV

      - name: Check file structure
        run: |
          FILES_CHECKED=0
          INVALID_FILES=0
          STRUCTURE_OUTPUT="### üìÅ File Structure Check\n\n"

          for tf_file in $(find . -name "*.tf" -type f); do
            ((FILES_CHECKED++))
            if [[ ! $tf_file =~ /Day[0-9]+/Submissions/[^/]+/.*\.tf$ ]]; then
              ((INVALID_FILES++))
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              STRUCTURE_OUTPUT+="‚ùå \`$tf_file\` is not in the required format\n"
            fi
          done

          if [ $INVALID_FILES -eq 0 ]; then
            STRUCTURE_OUTPUT+="‚úÖ All $FILES_CHECKED files follow correct structure\n"
          fi

          echo -e "FILE_STRUCTURE_RESULTS<<EOF\n$STRUCTURE_OUTPUT\nEOF" >> $GITHUB_ENV

      - name: Security and Syntax Check
        continue-on-error: true
        run: |
          SECURITY_ISSUES=false
          SECURITY_OUTPUT="### üîí Security and Syntax Check Results\n\n"

          for tf_file in $(find . -name "*.tf" -type f); do
            FILE_HAS_ISSUES=false

            if CREDS=$(grep -n -i "access_key\|secret_key\|password\|token" "$tf_file"); then
              SECURITY_ISSUES=true
              FILE_HAS_ISSUES=true
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              SECURITY_OUTPUT+="‚ùå Hardcoded Credentials in \`$tf_file\`:\n\`\`\`\n$CREDS\n\`\`\`\n\n"
            fi

            if PUBLIC=$(grep -n -i "acl.*=.*public" "$tf_file"); then
              SECURITY_ISSUES=true
              FILE_HAS_ISSUES=true
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              SECURITY_OUTPUT+="‚ö†Ô∏è Public Access in \`$tf_file\`:\n\`\`\`\n$PUBLIC\n\`\`\`\n\n"
            fi

            if TAGS=$(grep -A5 "tags.*=.*{" "$tf_file" | grep -E '=\s*$|=\s*"[^"]*$'); then
              SECURITY_ISSUES=true
              FILE_HAS_ISSUES=true
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              SECURITY_OUTPUT+="‚ùå Malformed Tags in \`$tf_file\`:\n\`\`\`\n$TAGS\n\`\`\`\n\n"
            fi

            OPEN_BRACKETS=$(grep -o "{" "$tf_file" | wc -l)
            CLOSE_BRACKETS=$(grep -o "}" "$tf_file" | wc -l)
            if [ "$OPEN_BRACKETS" -ne "$CLOSE_BRACKETS" ]; then
              SECURITY_ISSUES=true
              FILE_HAS_ISSUES=true
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              SECURITY_OUTPUT+="‚ùå Unmatched Brackets in \`$tf_file\`: {=$OPEN_BRACKETS, }=$CLOSE_BRACKETS\n\n"
            fi

            if [ "$FILE_HAS_ISSUES" = false ]; then
              SECURITY_OUTPUT+="‚úÖ No issues in \`$tf_file\`\n\n"
            fi
          done

          if [ "$SECURITY_ISSUES" = false ]; then
            SECURITY_OUTPUT+="‚úÖ All files passed security and syntax checks\n"
          fi

          echo -e "SECURITY_RESULTS<<EOF\n$SECURITY_OUTPUT\nEOF" >> $GITHUB_ENV

      - name: Terraform Format Check
        run: |
          FORMAT_ISSUES=false
          FORMAT_OUTPUT="### üîç Format Check Results\n\n"

          for dir in $(find . -name "*.tf" -type f -exec dirname {} \; | sort -u); do
            if ! terraform fmt -check -recursive -diff "$dir" > fmt_output 2>&1; then
              FORMAT_ISSUES=true
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              FORMAT_OUTPUT+="‚ùå Formatting issues in \`$dir\`:\n\`\`\`diff\n$(cat fmt_output)\n\`\`\`\n\n"
            else
              FORMAT_OUTPUT+="‚úÖ $dir is properly formatted\n\n"
            fi
          done

          if [ "$FORMAT_ISSUES" = false ]; then
            FORMAT_OUTPUT+="‚úÖ All directories are properly formatted\n"
          fi

          echo -e "FORMAT_RESULTS<<EOF\n$FORMAT_OUTPUT\nEOF" >> $GITHUB_ENV

      - name: Terraform Validation
        run: |
          VALIDATION_ISSUES=false
          VALIDATION_OUTPUT="### üîß Terraform Validation Results\n\n"

          for dir in $(find . -name "*.tf" -type f -exec dirname {} \; | sort -u); do
            cd "$dir"
            VALIDATION_OUTPUT+="Checking \`$dir\`\n"

            if ! terraform init -backend=false > init_output 2>&1; then
              VALIDATION_ISSUES=true
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              VALIDATION_OUTPUT+="‚ùå Init failed:\n\`\`\`\n$(cat init_output)\n\`\`\`\n\n"
            else
              VALIDATION_OUTPUT+="‚úÖ Init succeeded\n"
            fi

            if ! terraform validate -no-color > validate_output 2>&1; then
              VALIDATION_ISSUES=true
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              VALIDATION_OUTPUT+="‚ùå Validation failed:\n\`\`\`\n$(cat validate_output)\n\`\`\`\n\n"
            else
              VALIDATION_OUTPUT+="‚úÖ Validation passed\n"
            fi

            cd - > /dev/null
          done

          if [ "$VALIDATION_ISSUES" = false ]; then
            VALIDATION_OUTPUT+="‚úÖ All Terraform configs validated\n"
          fi

          echo -e "VALIDATION_RESULTS<<EOF\n$VALIDATION_OUTPUT\nEOF" >> $GITHUB_ENV

      - name: Post Results
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const fileStructure = process.env.FILE_STRUCTURE_RESULTS || '';
            const security = process.env.SECURITY_RESULTS || '';
            const format = process.env.FORMAT_RESULTS || '';
            const validation = process.env.VALIDATION_RESULTS || '';
            const hasIssues = process.env.HAS_ISSUES === 'true';
            
            let comment = '## üìã Terraform Validation Summary\n\n';
            comment += hasIssues ? 
              '### Status: Changes Required ‚ö†Ô∏è\n' :
              '### Status: All Checks Passed ‚úÖ\n';
            
            comment += '\n## Detailed Results\n\n';
            comment += fileStructure + '\n';
            comment += security + '\n';
            comment += format + '\n';
            comment += validation;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Check for Issues
        if: always()
        run: |
          if [ "$HAS_ISSUES" = "true" ]; then
            echo "Validation checks failed. Please fix the issues before merging."
            exit 1
          fi
