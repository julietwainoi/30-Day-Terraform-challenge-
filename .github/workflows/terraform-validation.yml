name: Terraform Validation

on:
  pull_request:
    branches:
      - 'week*'
    types: [opened, synchronize, reopened]

jobs:
  terraform-validation:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Initialize Results
        run: |
          echo "FILE_STRUCTURE_RESULTS=" >> $GITHUB_ENV
          echo "SECURITY_RESULTS=" >> $GITHUB_ENV
          echo "FORMAT_RESULTS=" >> $GITHUB_ENV
          echo "VALIDATION_RESULTS=" >> $GITHUB_ENV
          echo "HAS_ISSUES=false" >> $GITHUB_ENV

      - name: Check file structure
        id: file_structure
        continue-on-error: true
        run: |
          FILES_CHECKED=0
          INVALID_FILES=0
          
          for tf_file in $(find . -name "*.tf" -type f); do
            ((FILES_CHECKED++))
            if [[ ! $tf_file =~ /Day[0-9]+/Submissions/[^/]+/.*\.tf$ ]]; then
              ((INVALID_FILES++))
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              echo "FILE_STRUCTURE_RESULTS<<EOF" >> $GITHUB_ENV
              echo "### ‚ùå File Structure Check Failed" >> $GITHUB_ENV
              echo "- File: \`$tf_file\`" >> $GITHUB_ENV
              echo "- Required format: \`Day<number>/Submissions/<username>/*.tf\`" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            fi
          done
          
          if [ $INVALID_FILES -eq 0 ]; then
            echo "FILE_STRUCTURE_RESULTS<<EOF" >> $GITHUB_ENV
            echo "### ‚úÖ File Structure Check Passed" >> $GITHUB_ENV
            echo "- All $FILES_CHECKED Terraform files follow the correct structure" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Security and Syntax Check
        id: security
        continue-on-error: true
        run: |
          SECURITY_ISSUES=false
          echo "SECURITY_RESULTS<<EOF" >> $GITHUB_ENV
          echo "### üîí Security and Syntax Check Results" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          
          for tf_file in $(find . -name "*.tf" -type f); do
            FILE_HAS_ISSUES=false
            
            # Check for hardcoded credentials
            if CREDS=$(grep -n -i "access_key\|secret_key\|password\|token" "$tf_file"); then
              SECURITY_ISSUES=true
              FILE_HAS_ISSUES=true
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              echo "‚ùå Hardcoded Credentials found in \`$tf_file\`:" >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              echo "$CREDS" >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
            fi
            
            # Check for public access
            if PUBLIC=$(grep -n -i "acl.*=.*public" "$tf_file"); then
              SECURITY_ISSUES=true
              FILE_HAS_ISSUES=true
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              echo "‚ö†Ô∏è Public Access configured in \`$tf_file\`:" >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              echo "$PUBLIC" >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
            fi
            
            # Check for malformed tags
            if TAGS=$(grep -A5 "tags.*=.*{" "$tf_file" | grep -E '=\s*$|=\s*"[^"]*$'); then
              SECURITY_ISSUES=true
              FILE_HAS_ISSUES=true
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              echo "‚ùå Malformed Tags in \`$tf_file\`:" >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              echo "$TAGS" >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
            fi

            # Check for missing closing brackets
            if grep -n "{" "$tf_file" | wc -l > bracket_open && grep -n "}" "$tf_file" | wc -l > bracket_close; then
              if [ "$(cat bracket_open)" -ne "$(cat bracket_close)" ]; then
                SECURITY_ISSUES=true
                FILE_HAS_ISSUES=true
                echo "HAS_ISSUES=true" >> $GITHUB_ENV
                echo "‚ùå Unmatched Brackets in \`$tf_file\`:" >> $GITHUB_ENV
                echo "- Opening brackets: $(cat bracket_open)" >> $GITHUB_ENV
                echo "- Closing brackets: $(cat bracket_close)" >> $GITHUB_ENV
                echo "" >> $GITHUB_ENV
              fi
            fi
            
            if [ "$FILE_HAS_ISSUES" = false ]; then
              echo "‚úÖ No security or syntax issues found in \`$tf_file\`" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
            fi
          done
          
          if [ "$SECURITY_ISSUES" = false ]; then
            echo "‚úÖ All files passed security and syntax checks" >> $GITHUB_ENV
          fi
          echo "EOF" >> $GITHUB_ENV

      - name: Terraform Format Check
        id: fmt
        continue-on-error: true
        run: |
          FORMAT_ISSUES=false
          echo "FORMAT_RESULTS<<EOF" >> $GITHUB_ENV
          echo "### üîç Format Check Results" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          
          for dir in $(find . -name "*.tf" -type f -exec dirname {} \; | sort -u); do
            if ! terraform fmt -check -recursive -diff "$dir" > fmt_output 2>&1; then
              FORMAT_ISSUES=true
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              echo "‚ùå Formatting issues in \`$dir\`:" >> $GITHUB_ENV
              echo "\`\`\`diff" >> $GITHUB_ENV
              cat fmt_output >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
            else
              echo "‚úÖ Directory \`$dir\` is properly formatted" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
            fi
          done
          
          if [ "$FORMAT_ISSUES" = false ]; then
            echo "‚úÖ All files are properly formatted" >> $GITHUB_ENV
          fi
          echo "EOF" >> $GITHUB_ENV

      - name: Terraform Validation
        id: validate
        continue-on-error: true
        run: |
          VALIDATION_ISSUES=false
          echo "VALIDATION_RESULTS<<EOF" >> $GITHUB_ENV
          echo "### üîß Terraform Validation Results" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          
          for dir in $(find . -name "*.tf" -type f -exec dirname {} \; | sort -u); do
            cd $dir
            echo "Checking directory: \`$dir\`" >> $GITHUB_ENV
            
            # Initialize without backend and providers
            if ! terraform init -backend=false > init_output 2>&1; then
              VALIDATION_ISSUES=true
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              echo "‚ùå Initialization failed:" >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              cat init_output >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
            else
              echo "‚úÖ Initialization successful" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
            fi
            
            # Run validation
            if ! terraform validate -no-color > validate_output 2>&1; then
              VALIDATION_ISSUES=true
              echo "HAS_ISSUES=true" >> $GITHUB_ENV
              echo "‚ùå Validation failed:" >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              cat validate_output >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
            else
              echo "‚úÖ Validation successful" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV
            fi
            cd - > /dev/null
          done
          
          if [ "$VALIDATION_ISSUES" = false ]; then
            echo "‚úÖ All directories passed validation" >> $GITHUB_ENV
          fi
          echo "EOF" >> $GITHUB_ENV

      - name: Post Results
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const fileStructure = process.env.FILE_STRUCTURE_RESULTS || '';
            const security = process.env.SECURITY_RESULTS || '';
            const format = process.env.FORMAT_RESULTS || '';
            const validation = process.env.VALIDATION_RESULTS || '';
            const hasIssues = process.env.HAS_ISSUES === 'true';
            
            let comment = '## üìã Terraform Validation Summary\n\n';
            comment += hasIssues ? 
              '### Status: Changes Required ‚ö†Ô∏è\n' :
              '### Status: All Checks Passed ‚úÖ\n';
            
            comment += '\n## Detailed Results\n\n';
            comment += fileStructure + '\n';
            comment += security + '\n';
            comment += format + '\n';
            comment += validation;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Check for Issues
        if: always()
        run: |
          if [ "$HAS_ISSUES" = "true" ]; then
            echo "Validation checks failed. Please fix the issues before merging."
            exit 1 
          fi
